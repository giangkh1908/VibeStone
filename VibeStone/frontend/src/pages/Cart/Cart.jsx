import React, { useState, useEffect, useContext, useRef } from 'react'
import './Cart.css'
import { useNavigate } from 'react-router-dom'
import { StoreContext } from '../../Context/StoreContext'
import { notifyRemovedFromCart } from '../../utils/notifications'
import axios from 'axios'
import useDebounce from '../../hooks/useDebounce'

const Cart = () => {
  const [cartItems, setCartItems] = useState({})
  const [products, setProducts] = useState([])
  const [pendingChanges, setPendingChanges] = useState({}) // Theo d√µi quantity changes
  const [isUpdating, setIsUpdating] = useState(false)
  const navigate = useNavigate()
  const CURRENCY = ' VNƒê'
  const DELIVERY_CHARGE = 5000
  const { url, token, food_list, setCartItems: setContextCartItems } = useContext(StoreContext)
  
  // Debounce pending changes v·ªõi delay 1.5 gi√¢y
  const debouncedPendingChanges = useDebounce(pendingChanges, 1500)
  
  const isMountedRef = useRef(true)

  // H√†m ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá
  const formatCurrency = (amount) => {
    return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
  }

  useEffect(() => {
    isMountedRef.current = true
    return () => {
      isMountedRef.current = false
    }
  }, [])

  useEffect(() => {
    // L·∫•y d·ªØ li·ªáu gi·ªè h√†ng t·ª´ localStorage
    const savedCart = localStorage.getItem('cart')
    if (savedCart) {
      setCartItems(JSON.parse(savedCart))
    }

    // L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ localStorage
    const savedProducts = localStorage.getItem('products')
    if (savedProducts) {
      setProducts(JSON.parse(savedProducts))
    }
  }, [])

  // Effect ƒë·ªÉ batch sync v·ªõi server
  useEffect(() => {
    const batchSyncWithServer = async () => {
      if (!token || Object.keys(debouncedPendingChanges).length === 0 || isUpdating) {
        return
      }

      setIsUpdating(true)
      
      try {
        console.log('üîÑ Batch syncing cart changes with server...', debouncedPendingChanges)
        
        // G·ªçi API batch update m·ªôt l·∫ßn duy nh·∫•t
        await axios.post(url + "/api/cart/batch-update", {
          items: debouncedPendingChanges
        }, { 
          headers: { token } 
        })
        
        // Clear pending changes sau khi sync th√†nh c√¥ng
        setPendingChanges({})
        
      } catch (error) {
        console.error('‚ùå Error batch syncing cart with server:', error)
        // C√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho user
      } finally {
        if (isMountedRef.current) {
          setIsUpdating(false)
        }
      }
    }

    batchSyncWithServer()
  }, [debouncedPendingChanges, token, url])

  // H√†m helper ƒë·ªÉ update local state v√† pending changes
  const updateCartItem = (itemId, newQuantity) => {
    // Ensure minimum quantity is 1 (or 0 to remove)
    const finalQuantity = Math.max(0, newQuantity)
    
    // C·∫≠p nh·∫≠t state local ngay l·∫≠p t·ª©c
    setCartItems(prevCart => {
      const newCart = { ...prevCart }
      
      if (finalQuantity === 0) {
        delete newCart[itemId]
      } else {
        newCart[itemId] = finalQuantity
      }
      
      localStorage.setItem('cart', JSON.stringify(newCart))
      return newCart
    })
    
    // C·∫≠p nh·∫≠t context cart items
    setContextCartItems(prevCart => {
      const newCart = { ...prevCart }
      
      if (finalQuantity === 0) {
        delete newCart[itemId]
      } else {
        newCart[itemId] = finalQuantity
      }
      
      return newCart
    })
    
    // Queue cho batch update n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
    if (token) {
      setPendingChanges(prev => {
        const newPending = { ...prev }
        
        if (finalQuantity === 0) {
          delete newPending[itemId]
        } else {
          newPending[itemId] = finalQuantity
        }
        
        return newPending
      })
    }
    
    // Trigger cart updated event
    window.dispatchEvent(new Event('cartUpdated'))
  }

  // TƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
  const increaseQuantity = (itemId) => {    
    try {
      const currentQuantity = cartItems[itemId] || 0
      updateCartItem(itemId, currentQuantity + 1)
    } catch (error) {
      console.error('Error increasing quantity:', error)
    }
  }

  // Gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m (t·ªëi thi·ªÉu l√† 1)
  const decreaseQuantity = (itemId) => {
    try {
      const currentQuantity = cartItems[itemId] || 0
      if (currentQuantity > 1) {
        updateCartItem(itemId, currentQuantity - 1)
      }
    } catch (error) {
      console.error('Error decreasing quantity:', error)
    }
  }

  // X√≥a to√†n b·ªô s·∫£n ph·∫©m
  const removeItem = async (itemId) => {
    try {
      // T√¨m s·∫£n ph·∫©m ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
      const product = food_list.find(p => p._id === itemId)
      
      // Set quantity = 0 ƒë·ªÉ x√≥a
      updateCartItem(itemId, 0)
      
      // T·∫°o hi·ªáu ·ª©ng nh·∫£y cho cart icon
      const cartCountElement = document.querySelector('.cart-count')
      if (cartCountElement) {
        cartCountElement.classList.remove('animate-bounce')
        setTimeout(() => {
          cartCountElement.classList.add('animate-bounce')
        }, 10)
      }
      
      // Hi·ªÉn th·ªã th√¥ng b√°o khi x√≥a s·∫£n ph·∫©m
      if (product) {
        notifyRemovedFromCart(product.name)
      }
      
    } catch (error) {
      console.error('Error removing item:', error)
    }
  }

  // Th√™m h√†m ƒë·ªÉ set quantity tr·ª±c ti·∫øp (cho input number)
  const setQuantity = (itemId, quantity) => {
    const numQuantity = parseInt(quantity) || 1
    updateCartItem(itemId, numQuantity)
  }

  const getTotalCartAmount = () => {
    let totalAmount = 0
    for (const itemId in cartItems) {
      const product = food_list.find(p => p._id === itemId)
      if (product) {
        totalAmount += product.price * cartItems[itemId]
      }
    }
    return totalAmount
  }

  const handleCheckout = () => {
    console.log('Checkout button clicked')
    console.log('Cart items:', cartItems)
    console.log('Total amount:', getTotalCartAmount())
    
    // Ki·ªÉm tra xem c√≥ s·∫£n ph·∫©m trong gi·ªè h√†ng kh√¥ng
    if (getTotalCartAmount() === 0) {
      alert('Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!')
      return
    }
    
    // Ki·ªÉm tra n·∫øu ƒëang c√≥ pending changes
    if (Object.keys(pendingChanges).length > 0) {
      alert('ƒêang ƒë·ªìng b·ªô gi·ªè h√†ng v·ªõi server, vui l√≤ng ƒë·ª£i m·ªôt ch√∫t...')
      return
    }
    
    // ƒê·ªìng b·ªô cartItems v·ªõi StoreContext tr∆∞·ªõc khi navigate
    setContextCartItems(cartItems)
    
    try {
      navigate('/order')
      console.log('Navigation attempted to /order')
    } catch (error) {
      console.error('Navigation error:', error)
    }
  }

  return (
    <div className='cart'>

      
      <div className="cart-items">
        <div className="cart-items-title">
          <p>S·∫£n ph·∫©m </p> <p>Ti√™u ƒë·ªÅ </p> <p>Gi√° </p> <p>S·ªë l∆∞·ª£ng </p> <p>T·ªïng </p> <p>G·ª° b·ªè</p>
        </div>
        <br />
        <hr />
        {food_list.map((item, index)=> {
          if (item && cartItems[item._id] > 0) {
            return (
              <div key={index}>
              <div className="cart-items-title cart-items-item">
                  <img src={item.image} alt={item.name} />
                <p>{item.name}</p>
                  <p>{formatCurrency(item.price)}{CURRENCY}</p>
                  <div className="quantity-controls">
                    <button 
                      onClick={() => decreaseQuantity(item._id)}
                      disabled={cartItems[item._id] <= 1}
                    >
                      -
                    </button>
                    
                    {/* Input number ƒë·ªÉ set quantity tr·ª±c ti·∫øp */}
                    <input 
                      type="number" 
                      min="1" 
                      value={cartItems[item._id]} 
                      onChange={(e) => setQuantity(item._id, e.target.value)}
                      className="quantity-input"
                    />
                    
                    <button onClick={() => increaseQuantity(item._id)}>+</button>
                  </div>
                  <p>{formatCurrency(item.price * cartItems[item._id])}{CURRENCY}</p>
                  <p className='cart-items-remove-icon' onClick={() => removeItem(item._id)}>x</p>
                </div>
                <hr />
              </div>
            )
          }
          return null
        })}
      </div>
      <div className="cart-bottom">
        <div className="cart-total">
          <h2>T·ªïng k·∫øt gi·ªè h√†ng</h2>
          <div>
            <div className="cart-total-details">
              <p>Th√†nh ti·ªÅn</p>
              <p>{formatCurrency(getTotalCartAmount())}{CURRENCY}</p>
            </div>
            <hr />
            <div className="cart-total-details">
              <p>Ph√≠ v·∫≠n chuy·ªÉn</p>
              <p>{formatCurrency(getTotalCartAmount() === 0 ? 0 : DELIVERY_CHARGE)}{CURRENCY}</p>
            </div>
            <hr />
            <div className="cart-total-details">
              <b>T·ªïng</b>
              <b>{formatCurrency(getTotalCartAmount() === 0 ? 0 : getTotalCartAmount() + DELIVERY_CHARGE)}{CURRENCY}</b>
            </div>
          </div>
          <button onClick={handleCheckout}>THANH TO√ÅN</button>
        </div>
        <div className="cart-promocode">
          <div>
            <p>N·∫øu b·∫°n c√≥ m√£ khuy·∫øn m√£i, h√£y nh·∫≠p n√≥ v√†o ƒë√¢y!</p>
            <div className='cart-promocode-input'>
              <input type="text" placeholder='M√£ khuy·∫øn m√£i'/>
              <button>X√°c nh·∫≠n</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Cart